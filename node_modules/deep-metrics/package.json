{
  "_args": [
    [
      {
        "raw": "deep-metrics@^0.0.1",
        "scope": null,
        "escapedName": "deep-metrics",
        "name": "deep-metrics",
        "rawSpec": "^0.0.1",
        "spec": ">=0.0.1 <0.0.2",
        "type": "range"
      },
      "/home/tonio/Documentos/Developer/Proyectos/Personales/NodeJS/MakingCMS/node_modules/pmx"
    ]
  ],
  "_from": "deep-metrics@>=0.0.1 <0.0.2",
  "_id": "deep-metrics@0.0.1",
  "_inCache": true,
  "_location": "/deep-metrics",
  "_nodeVersion": "8.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/deep-metrics-0.0.1.tgz_1517839795206_0.0041689344216138124"
  },
  "_npmUser": {
    "name": "vmarchaud",
    "email": "contact@vmarchaud.fr"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "deep-metrics@^0.0.1",
    "scope": null,
    "escapedName": "deep-metrics",
    "name": "deep-metrics",
    "rawSpec": "^0.0.1",
    "spec": ">=0.0.1 <0.0.2",
    "type": "range"
  },
  "_requiredBy": [
    "/pmx"
  ],
  "_resolved": "https://registry.npmjs.org/deep-metrics/-/deep-metrics-0.0.1.tgz",
  "_shasum": "8ac3333195cc5eca059b224eb1ca61fc4cda50fd",
  "_shrinkwrap": null,
  "_spec": "deep-metrics@^0.0.1",
  "_where": "/home/tonio/Documentos/Developer/Proyectos/Personales/NodeJS/MakingCMS/node_modules/pmx",
  "author": "",
  "dependencies": {
    "semver": "^5.3.0"
  },
  "description": "```javascript var monitoring = require('../..').start() monitoring.ee.on('socketio', function(data) {   console.log(data) }) ```",
  "devDependencies": {
    "mocha": "^5.0.0"
  },
  "directories": {
    "lib": "lib",
    "probes": "probes"
  },
  "dist": {
    "integrity": "sha512-732WmZgCWxOkf4QBvrCjPPuT6wTEzaGye/4JqYsU/sO0J53UNX4PBwK0JV262BZ5cxgLmKhU+NlrtKdPDgybkg==",
    "shasum": "8ac3333195cc5eca059b224eb1ca61fc4cda50fd",
    "tarball": "https://registry.npmjs.org/deep-metrics/-/deep-metrics-0.0.1.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "gitHead": "cfa4e6d1a96d5ecfff692a042fb02a6ffd8d5c56",
  "license": "Apache-2.0",
  "maintainers": [
    {
      "name": "vmarchaud",
      "email": "contact@vmarchaud.fr"
    }
  ],
  "name": "deep-metrics",
  "optionalDependencies": {},
  "readme": "# Appmetrics tuned\n\n```javascript\nvar monitoring = require('../..').start()\nmonitoring.ee.on('socketio', function(data) {\n  console.log(data)\n})\n```\n\n## API: Dependency Events (probes)\n\n### Event: 'http'/'https'\nEmitted when a HTTP/HTTPS request is made of the application.\n* `data` (Object) the data from the HTTP(S) request:\n    * `time` (Number) the milliseconds when the request was made. This can be converted to a Date using `new Date(data.time)`.\n    * `method` (String) the HTTP(S) method used for the request.\n    * `url` (String) the URL on which the request was made.\n    * `duration` (Number) the time taken for the HTTP(S) request to be responded to in ms.\n    * `header` (String) the response header for the HTTP(S) request.\n    * `contentType` (String) the content type of the HTTP(S) request.\n    * `requestHeader` (Object) the request header for HTTP(S) request.\n\n### Event: 'http-outbound'/'https-outbound'\nEmitted when the application makes an outbound HTTP/HTTPS request.\n* `data` (Object) the data from the HTTP(S) request:\n    * `time` (Number) the milliseconds when the request was made. This can be converted to a Date using `new Date(data.time)`.\n    * `method` (String) the HTTP(S) method used for the request.\n    * `url` (String) the URL on which the request was made.\n    * `contentType` (String) the HTTP(S) response content-type.\n    * `statusCode` (String) the HTTP response status code.\n    * `duration` (Number) the time taken for the HTTP(S) request to be responded to in ms.\n    * 'requestHeaders' (Object) the HTTP(S) request headers.\n\n### Event: 'leveldown'\nEmitted when a LevelDB query is made using the `leveldown` module.\n* `data` (Object) the data from the LevelDB query:\n    * `time` (Number) the time in milliseconds when the LevelDB query was made. This can be converted to a Date using `new Date(data.time)`.\n    * `method` (String) The leveldown method being used.\n    * `key` (Object) The key being used for a call to `get`, `put` or `del` (Undefined for other methods)\n    * `value` (Object) The value being added to the LevelDB database using the `put` method (Undefined for other methods)\n    * `opCount` (Number) The number of operations carried out by a `batch` method (Undefined for other methods)\n    * `duration` (Number) the time taken for the LevelDB query to be responded to in ms.\n\n### Event: 'loopback-datasource-juggler'\nEmitted when a function is called on the `loopback-datasource-juggler` module\n* `data` (Object) the data from the loopback-datasource-juggler event:\n    * `time` (Number) the time in milliseconds when the event occurred. This can be converted to a Date using `new Date(data.time)`\n    * `method` (String) the function the juggler has executed\n    * `duration` (Number) the time taken for the operation to complete.\n\n### Event: 'memcached'\nEmitted when a data is stored, retrieved or modified in Memcached using the `memcached` module.\n* `data` (Object) the data from the memcached event:\n    * `time` (Number) the milliseconds when the memcached event occurred. This can be converted to a Date using `new Date(data.time)`\n    * `method` (String) the method used in the memcached client, eg `set`, `get`, `append`, `delete`, etc.\n    * `key` (String) the key associated with the data.\n    * `duration` (Number) the time taken for the operation on the memcached data to occur.\n\n### Event: 'mongo'\nEmitted when a MongoDB query is made using the `mongodb` module.\n* `data` (Object) the data from the MongoDB request:\n    * `time` (Number) the milliseconds when the MongoDB query was made. This can be converted to a Date using `new Date(data.time)`\n    * `query` (String) the query made of the MongoDB database.\n    * `duration` (Number) the time taken for the MongoDB query to be responded to in ms.\n    * `method` (String) the executed method for the query, such as find, update.\n    * `collection` (String) the MongoDB collection name.\n\n### Event: 'mqlight'\nEmitted when a MQLight message is sent or received.\n* `data` (Object) the data from the MQLight event:\n    * `time` (Number) the time in milliseconds when the MQLight event occurred. This can be converted to a Date using new Date(data.time).\n    * `clientid` (String) the id of the client.\n    * `data` (String) the data sent if a 'send' or 'message', undefined for other calls.  Truncated if longer than 25 characters.\n    * `method` (String) the name of the call or event (will be one of 'send' or 'message').\n    * `topic` (String) the topic on which a message is sent/received.\n    * `qos` (Number) the QoS level for a 'send' call, undefined if not set.\n    * `duration` (Number) the time taken in milliseconds.\n\n### Event: 'mqtt'\nEmitted when a MQTT message is sent or received.\n* `data` (Object) the data from the MQTT event:\n    * `time` (Number) the time in milliseconds when the MQTT event occurred. This can be converted to a Date using new Date(data.time).\n    * `method` (String) the name of the call or event (will be one of 'publish' or 'message').\n    * `topic` (String) the topic on which a message is published or received.\n    * `qos` (Number) the QoS level for the message.\n    * `duration` (Number) the time taken in milliseconds.\n\n### Event: 'mysql'\nEmitted when a MySQL query is made using the `mysql` module.\n* `data` (Object) the data from the MySQL query:\n    * `time` (Number) the milliseconds when the MySQL query was made. This can be converted to a Date using `new Date(data.time)`.\n    * `query` (String) the query made of the MySQL database.\n    * `duration` (Number) the time taken for the MySQL query to be responded to in ms.\n\n### Event: 'oracle'\nEmitted when a query is executed using the `oracle` module.\n* `data` (Object) the data from the Oracle query:\n    * `time` (Number) the milliseconds when the Oracle query was made. This can be converted to a Date using `new Date(data.time)`.\n    * `query` (String) the query made of the Oracle database.\n    * `duration` (Number) the time taken for the Oracle query to be responded to in ms.\n\n### Event: 'oracledb'\nEmitted when a query is executed using the `oracledb` module.\n* `data` (Object) the data from the OracleDB query:\n    * `time` (Number) the milliseconds when the OracleDB query was made. This can be converted to a Date using `new Date(data.time)`.\n    * `query` (String) the query made of the OracleDB database.\n    * `duration` (Number) the time taken for the OracleDB query to be responded to in ms.\n\n### Event: 'postgres'\nEmitted when a PostgreSQL query is made to the `pg` module.\n* `data` (Object) the data from the PostgreSQL query:\n    * `time` (Number) the milliseconds when the PostgreSQL query was made. This can be converted to a Date using `new Date(data.time)`.\n    * `query` (String) the query made of the PostgreSQL database.\n    * `duration` (Number) the time taken for the PostgreSQL query to be responded to in ms.\n\n### Event: 'redis'\nEmitted when a Redis command is sent.\n* `data` (Object) the data from the Redis event:\n    * `time` (Number) the time in milliseconds when the redis event occurred. This can be converted to a Date using new Date(data.time).\n    * `cmd` (String) the Redis command sent to the server or 'batch.exec'/'multi.exec' for groups of command sent using batch/multi calls.\n    * `duration` (Number) the time taken in milliseconds.\n\n### Event: 'riak'\nEmitted when a Riak method is called using the `basho-riak-client` module.\n* `data` (Object) the data from the Riak event:\n    * `time` (Number) the time in milliseconds when the riak event occurred. This can be converted to a Date using new Date(data.time).\n    * `method` (String) the Riak method called.\n    * `options` (Object) the options parameter passed to Riak.\n    * `command` (Object) the command parameter used in the `execute` method.\n    * `query` (String) the query parameter used in the `mapReduce` method.\n    * `duration` (Number) the time taken in milliseconds.\n\n### Event: 'socketio'\nEmitted when WebSocket data is sent or received by the application using socketio.\n* `data` (Object) the data from the socket.io request:\n    * `time` (Number) the milliseconds when the event occurred. This can be converted to a Date using `new Date(data.time)`.\n    * `method` (String) whether the event is a `broadcast` or `emit` from the application, or a `receive` from a client  .\n    * `event` (String) the name used for the event.\n    * `duration` (Number) the time taken for event to be sent or for a received event to be handled.\n\n### Event: 'strong-oracle'\nEmitted when a query is executed using the `strong-oracle` module.\n* `data` (Object) the data from the Strong Oracle query:\n    * `time` (Number) the milliseconds when the Strong Oracle query was made. This can be converted to a Date using `new Date(data.time)`.\n    * `query` (String) the query made of the database.\n    * `duration` (Number) the time taken for the Strong Oracle query to be responded to in ms.\n\n## API: Requests\n\n### Event: 'request'\nRequests are a special type of event emitted by appmetrics.  All the probes named above can also create request events if requests are enabled.  Howver requests are nested within a root incoming request (usually http). Request events are disabled by default.\n* `data` (Object) the data from the request:\n    * `time` (Number) the milliseconds when the request occurred. This can be converted to a Date using `new Date(data.time)`.\n    * `type` (String) The type of the request event. This is the name of the probe that sent the request data, e.g. `http`, `socketio` etc.\n    * `name` (String) The name of the request event. This is the request task, eg. the url, or the method being used.\n    * `request` (Object) the detailed data for the root request event:\n        * `type` (String) The type of the request event. This is the name of the probe that sent the request data, e.g. `http`, `socketio` etc.\n        * `name` (String) The name of the request event. This is the request task, eg. the url, or the method being used.\n        * `context` (Object) Additional context data (usually contains the same data as the associated non-request metric event).\n        * `stack` (String) An optional stack trace for the event call.\n        * `children` (Array) An array of child request events that occurred as part of the overall request event. Child request events may include function trace entries, which will have a `type` of null.\n        * `duration` (Number) the time taken for the request to complete in ms.\n    * `duration` (Number) the time taken for the overall request to complete in ms.\n",
  "readmeFilename": "README.md",
  "scripts": {},
  "version": "0.0.1"
}
